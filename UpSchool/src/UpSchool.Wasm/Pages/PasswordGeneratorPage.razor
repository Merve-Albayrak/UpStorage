@page "/passwordGenerator"
@page "/passwordGenerator/{PasswordLength:int}"
@page "/passwordGenerator/{PasswordLength:int}/{UserName}"
<!--

burası normalde bir component ama sayfa olarak algılanması için page
ile / dan sonra sayfa ismini ayarlamamız lazım
routelardeki id gibi gelcek no yu belirtebilirsin
-->
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Services;
@using UpSchool.Domain.Utilities
@using UpSchool.Wasm.Common.Utilities;
@using UpSchool.Wasm.Components
@inject IJSRuntime JsRuntime
@inject IToasterService ToastService
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<div class="container">

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">

                    <div class="card title text-center">
                        <h2 class="text-info">

                            Password generator @if(!string.IsNullOrEmpty(UserName)) @UserName
                        </h2>

                        <p> Create secure passwords with our Password Generator</p>
                    </div>
                </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-9">
                                <p>@password</p>
                            </div>

                            <div class="col-md-1">
                                <span  @onclick="@PreviousPassword" class="@($"oi oi-action-undo {isClickable} ")" aria-hidden="true">

                                </span></div>
                            <div class="col-md-1">
                                <span @onclick="@(() => SavePasswordAsync())" class="oi oi-folder clickable" aria-hidden="true"></span>
                            </div>
                            <div class="col-md-1">
                                <span @onclick="@(() => CopyToClipboardAsync())" class="oi oi-document clickable" aria-hidden="true"></span>
                            </div>
                            <div class="col-md-1">
                                <span @onclick=@GeneratePassword class="oi oi-loop-circular clickable" aria-hidden="true"></span>
                            </div>
                        </div>
                    </div>
                <div class="card-footer">
                        <hr class="@CssColorClass" style="height:2vh !important; " />
                    <!--
                        dfd
                    //dieğr tüm css leri ezer important yazdığımızda
                    //kullanımı çok önerilmez

                    -->
                </div>
            </div>
        </div>

    </div>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-body">
                    <div class="mt-2 text-center">
                        <label>
                                Password Length <span class="@($"badge {CssColorClass}")">@generatePasswordDto.Length</span>

                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers" />
                        <label class="form-check-label" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars" />
                        <label class="form-check-label" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars" />
                        <label class="form-check-label" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars" />
                        <label class="form-check-label" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
        </div>

    </div>

         <SavedPasswordsCard
        savedPasswords="@savedPasswords" 
        OnCopyToClipboardAsync="CopyToClipboardAsync"
                        OnClearSavedPasswords="@ClearSavedPasswords" FetchPasswordsAsyncCallBack="@FetchPasswordsAsync"
                        DeletePasswordAsyncCallBack=@DeletePasswordAsync
                        />
        <!--

    componentın şifreleri alması için saved password ile parametre geçişi yapıyoruz
    saved passwords componentını kullan demek bu
    üstte using eklenmeli(component klasörü)
-->

</div>



    @code
    {
    [Parameter] //parametre olduğunu göstermek için route da kullanıyoruz

    public int? PasswordLength { get; set; }

    [Parameter] //parametre olduğunu göstermek için route da kullanıyoruz

    public string? UserName { get; set; }
    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();
    public string password = string.Empty;
    public string CssColorClass = "bg-danger";

    //---geri alma ödevi için eklenen değişkenler------

    private List<string> savedPasswords;
    private PasswordCareTaker passwordCareTaker =new PasswordCareTaker();
    private string isClickable = "text-secondary";
    /// /----------------------
    protected override async Task OnInitializedAsync()
    {
        savedPasswords = new List<string>();


        GeneratePassword();

        var localStoragePasswords = await localStorage.GetItemAsync<List<string>>("savedPasswords");

        // if (localStorage is not null) savedPasswords = localStoragePasswords;


        // is not null ın =! dan farkı yanlış yazılmış paketin sıkıntısını kaldırır (override edildiyse =! operatörü sıkıntı çıkartır)

        //is not null kullanmak daha güvenli
        // return base.OnInitializedAsync(); async olduktaktan sonra retuen değil await edilir

        await FetchPasswordsAsync();
        await base.OnInitializedAsync();
    }
    private async Task FetchPasswordsAsync()
    {



        savedPasswords = await HttpClient.GetFromJsonAsync<List<string>>("Passwords");
    }
    private async Task DeletePasswordAsync(string password)
    {


        var response = await HttpClient.DeleteAsync($"Passwords/{password}");
        if (response.IsSuccessStatusCode)
        {


            savedPasswords.Remove(password);

            ToastService.ShowSuccess("The selected password was successfully deleted.");

            return;
        }

    }
    private async Task SavePasswordAsync()
    {
        var addRequest = new PasswordAddRequest(password);
        var response = await HttpClient.PostAsJsonAsync("Passwords", addRequest);
        if (response.IsSuccessStatusCode)
        {

            savedPasswords.Add(password);
            ToastService.ShowSuccess("Saved successfully");
            return;
        }
        ToastService.ShowError("An unexpected error occured");

        return;
        //  if (savedPasswords.Any(x => x == password)) return ValueTask.CompletedTask; //şifre daha önce kaydedilmiş mi kontrol et

        //valuetask task in biraz daha maliyetsiz versiyonudur
     //   await localStorage.SetItemAsync("savedPasswords", savedPasswords);
    }

    // protected override void OnInitialized()
    // {
    //ASYNC VERSİYONUNA GEÇTİK O YÜZDEN KALDIRDIK
    //sayfa yüklenirken bir şey yapmak istiyorsak oninitialized metodunu kullanabiliriz
    //burada on iniailze ezdik

    // base.OnInitialized();
    //  }

    private void GeneratePassword()
    {
        Password passwordOriginal = new Password();

        password = passwordGenerator.Generate(generatePasswordDto);
        passwordOriginal.Value = password;
        passwordCareTaker.PasswordMemento.Add(passwordOriginal.SavePassword());
      
        CheckIsClickable(passwordCareTaker.PasswordMemento.Count());

        CssColorClass = CssUtilities.GetCssColourClassForPasswords(password.Length);

        //kayıtşı şifreler dolu gelsin diye
        //savedPasswords.Add(password);
    }
    private async Task CopyToClipboardAsync()
    {


        ToastService.ShowSuccess("The selected password was copied to the clipboard."); //panoya kopyalandı mesajı

        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);//js kodunu çalıştırmak için. geriye bir şey dönmez


    }

    private void PreviousPassword()
    {
        //önceki şifreye dönme fonksiyonu
        //MEMENTO PATTERN CLASSLARI DTO KLASÖRÜNE KONULMUŞTUR
        if (!CheckIsClickable(passwordCareTaker.PasswordMemento.Count()))
        {
           
            return;
        }
        CheckIsClickable(passwordCareTaker.PasswordMemento.Count());
        passwordCareTaker.PasswordMemento.RemoveAt(passwordCareTaker.PasswordMemento.Count() - 1);
        int indexPrevious = passwordCareTaker.PasswordMemento.Count()  -1;

        string previousPassword = passwordCareTaker.PasswordMemento.ElementAt(indexPrevious).Value;


        CheckIsClickable(passwordCareTaker.PasswordMemento.Count());
       

        password = previousPassword;


    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adı geldi.");


        }

        password = passwordGenerator.Generate(generatePasswordDto);
    }

    private void OnInputChange(ChangeEventArgs args)
    {

        Password passwordOriginal = new Password();


        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);
        passwordOriginal.Value = password;
        passwordCareTaker.PasswordMemento.Add(passwordOriginal.SavePassword());


        CheckIsClickable(passwordCareTaker.PasswordMemento.Count);
        CssColorClass = CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length);


    }
    public bool CheckIsClickable(int passwordCount)
    {
        //ŞİFRE LİSTESİNDE SADECE 1 ŞİFRE VARSA KONTROL ET BUTONU CLICKABLE YAPMA

        if (passwordCount > 1)
        {
            isClickable = "clickable";
            return true;
        }
        else
        {
            isClickable = "text-secondary";
            return false;
        }  

    }



    private void ClearSavedPasswords()
    {

        savedPasswords.Clear();
    }
}


<style>
    body {
        background: #393E46
    }
</style>